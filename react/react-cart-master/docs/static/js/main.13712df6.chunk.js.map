{"version":3,"sources":["cart/ItemCard.tsx","cart/index.tsx","cart/use-checked.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemCard","React","memo","props","console","log","item","checked","onCheckedChange","name","price","className","type","onChange","e","target","Text","mark","prevProps","nextProps","cartData","Array","fill","undefined","map","v","i","id","Math","round","random","Cart","dataSource","key","useReducer","checkedMapParam","action","payload","dataItem","newCheckedAll","newCheckedMap","forEach","checkedMap","dispatch","useCallback","filterChecked","func","Object","entries","filter","Boolean","checkedId","find","Number","checkedAll","length","onCheckedAllChange","useEffect","checkedItem","changed","assign","useChecked","total","reduce","sum","cur","Footer","checkAll","header","footer","bordered","renderItem","Item","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.13712df6.chunk.js","sourcesContent":["import React from \"react\"\nimport { CartItem } from \"./\"\nimport { OnCheckedChange } from './use-checked'\nimport { Typography } from \"antd\"\n\ninterface Props {\n  item: CartItem\n  checked: boolean\n  onCheckedChange: OnCheckedChange<CartItem>\n}\n\n// memo优化策略\nfunction areEqual(prevProps: Props, nextProps: Props) {\n  return (\n    prevProps.checked === nextProps.checked\n  )\n}\n\nconst ItemCard = React.memo((props: Props) => {\n  console.log('cart item rerender')\n  const { item, checked, onCheckedChange } = props\n  const { name, price } = item\n\n  const onWrapCheckedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { checked } = e.target\n    onCheckedChange(item, checked)\n  }\n  \n  return (\n    <div className=\"item-card\">\n      <div className=\"checkbox-wrap\">\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={onWrapCheckedChange}\n        />\n      </div>\n      <p className=\"item-info\">\n        {name} <Typography.Text mark>${price}</Typography.Text>\n      </p>\n    </div>\n  )\n}, areEqual)\n\n\nexport default ItemCard","import React from \"react\"\nimport ItemCard from \"./ItemCard\"\nimport { List, Typography } from \"antd\"\nimport { useChecked } from \"./use-checked\"\nimport \"./index.css\"\n\nexport interface CartItem {\n  id: number\n  name: string\n  price: number\n}\n\nconst cartData = Array(5)\n  .fill(undefined)\n  .map((v, i) => ({\n    id: i,\n    name: `商品${i}`,\n    price: Math.round(Math.random() * 100),\n  }))\n\nexport default function Cart() {\n  const {\n    checkedAll,\n    checkedMap,\n    onCheckedAllChange,\n    onCheckedChange,\n    filterChecked,\n  } = useChecked(cartData)\n\n  // cartItems的积分总和\n  const sumPrice = (cartItems: CartItem[]) => {\n    return cartItems.reduce((sum, cur) => sum + cur.price, 0)\n  }\n\n  const onWrapCheckedAllChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const checkAll = e.target.checked\n    onCheckedAllChange(checkAll)\n  }\n\n  const total = sumPrice(filterChecked())\n\n  const Footer = (\n    <div className=\"footer\">\n      <div className=\"check-all\">\n        <input\n          checked={checkedAll}\n          onChange={onWrapCheckedAllChange}\n          type=\"checkbox\"\n        />\n        全选\n      </div>\n      <div>\n        价格总计 <Typography.Text mark>${total}</Typography.Text>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"cart\">\n      <List\n        header={<div>购物车</div>}\n        footer={Footer}\n        bordered\n        dataSource={cartData}\n        renderItem={item => {\n          const checked = checkedMap[item.id] || false\n          return (\n            <List.Item>\n              <ItemCard item={item} checked={checked} onCheckedChange={onCheckedChange}/>\n            </List.Item>\n          )\n        }}\n      />\n    </div>\n  )\n}\n","import { useReducer, useEffect, useCallback } from \"react\"\n\ninterface Option {\n  /** 用来在map中记录勾选状态的key 一般取id */\n  key?: string\n}\n\ntype CheckedMap = {\n  [key: string]: boolean\n}\n\nconst CHECKED_CHANGE = \"CHECKED_CHANGE\"\n\nconst CHECKED_ALL_CHANGE = \"CHECKED_ALL_CHANGE\"\n\nconst SET_CHECKED_MAP = \"SET_CHECKED_MAP\"\n\ntype CheckedChange<T> = {\n  type: typeof CHECKED_CHANGE\n  payload: {\n    dataItem: T\n    checked: boolean\n  }\n}\n\ntype CheckedAllChange = {\n  type: typeof CHECKED_ALL_CHANGE\n  payload: boolean\n}\n\ntype SetCheckedMap = {\n  type: typeof SET_CHECKED_MAP\n  payload: CheckedMap\n}\n\ntype Action<T> = CheckedChange<T> | CheckedAllChange | SetCheckedMap\nexport type OnCheckedChange<T> = (item: T, checked: boolean) => any\n\n/**\n * 提供勾选、全选、反选等功能\n * 提供筛选勾选中的数据的函数\n * 在数据更新的时候自动剔除陈旧项\n */\nexport const useChecked = <T extends Record<string, any>>(\n  dataSource: T[],\n  { key = \"id\" }: Option = {},\n) => {\n  const [checkedMap, dispatch] = useReducer(\n    (checkedMapParam: CheckedMap, action: Action<T>) => {\n      switch (action.type) {\n        case CHECKED_CHANGE: {\n          const { payload } = action\n          const { dataItem, checked } = payload\n          const { [key]: id } = dataItem\n          return {\n            ...checkedMapParam,\n            [id]: checked,\n          }\n        }\n        case CHECKED_ALL_CHANGE: {\n          const { payload: newCheckedAll } = action\n          const newCheckedMap: CheckedMap = {}\n          // 全选\n          if (newCheckedAll) {\n            dataSource.forEach(dataItem => {\n              newCheckedMap[dataItem.id] = true\n            })\n          }\n          return newCheckedMap\n        }\n        case SET_CHECKED_MAP: {\n          return action.payload\n        }\n        default:\n          return checkedMapParam\n      }\n    },\n    {},\n  )\n\n  /** 勾选状态变更 */\n  const onCheckedChange: OnCheckedChange<T> = useCallback(\n    (dataItem, checked) => {\n      dispatch({\n        type: CHECKED_CHANGE,\n        payload: {\n          dataItem,\n          checked,\n        },\n      })\n    },\n    [],\n  )\n\n  type FilterCheckedFunc = (item: T) => boolean\n  /** 筛选出勾选项 可以传入filter函数继续筛选 */\n  const filterChecked = useCallback(\n    (func: FilterCheckedFunc = () => true) => {\n      return (\n        Object.entries(checkedMap)\n          .filter(entries => Boolean(entries[1]))\n          .map(([checkedId]) =>\n            dataSource.find(({ [key]: id }) => id === Number(checkedId)),\n          )\n          // 有可能勾选了以后直接删除 此时id虽然在checkedMap里 但是dataSource里已经没有这个数据了\n          // 先把空项过滤掉 保证外部传入的func拿到的不为undefined\n          .filter(Boolean)\n          .filter(func as any) as T[]\n      )\n    },\n    [checkedMap, dataSource, key],\n  )\n  /** 是否全选状态 */\n  const checkedAll =\n    dataSource.length !== 0 && filterChecked().length === dataSource.length\n\n  /** 全选反选函数 */\n  const onCheckedAllChange = (newCheckedAll: boolean) => {\n    dispatch({\n      type: CHECKED_ALL_CHANGE,\n      payload: newCheckedAll,\n    })\n  }\n\n  // 数据更新的时候 如果勾选中的数据已经不在数据内了 就删除掉\n  useEffect(() => {\n    filterChecked().forEach((checkedItem) => {\n      let changed = false\n      if (!dataSource.find(dataItem => checkedItem.id === dataItem.id)) {\n        delete checkedMap[checkedItem.id]\n        changed = true\n      }\n      if (changed) {\n        dispatch({\n          type: SET_CHECKED_MAP,\n          payload: Object.assign({}, checkedMap),\n        })\n      }\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataSource])\n\n  return {\n    checkedMap,\n    dispatch,\n    onCheckedChange,\n    filterChecked,\n    onCheckedAllChange,\n    checkedAll,\n  }\n}\n","import React from 'react';\nimport Cart from './cart'\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}