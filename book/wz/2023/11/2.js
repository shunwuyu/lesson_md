// 插入排序
// 数组中的数据分为两个区间
// 已排序区间和未排序区间
// 1. 初始1个元素是已经排好序的
// 2. 核心思想是 取未排序区间中的元素， 在已排序区间中找到合适的位置将其插入， 并保证已排序区间数据一直有序。
//     找到插入点后， 我们还需要将插入点后的元素顺序后移一位， 这样才能腾出位置给元素a插入


// - 设计的操作
//     元素的比较  
//     元素的移动
// 需不要额外的空间？ 不需要， 原地排序算法
// 插入排序是稳定的排序算法吗？ 是 
// 时间复杂度
    // 如果已经有序， 不需要搬移任何数据 最好的时间复杂度为O(n)
    // 如果是倒序的， 每次插入都相当于在数组的第一个位置插入新的数据， O(n)


const insertionSort = (arr) => {
    const len = arr.length;
    let temp
    // 第一个元素是有序的， 从第二个元素开始
    for (let i = 1; i < len; i++) {
        let j = i 
        temp = arr[i] // 要把这个插进去
        while(j > 0 && arr[j - 1] > temp) {
            arr[j] = arr[j - 1]
            j--
        }
        arr[j] = temp 
    }
    return arr

}