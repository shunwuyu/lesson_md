// 当我们使用.then()方法时，第二个函数作为失败情况的回调函数
promise.then(function(result) {
    // 如果 promise 被解析了，我们就运行这个回调函数，并将结果传递给它
}, function(err) {
    // 如果 promise 被拒绝了，我们就运行这个回调函数，并将错误传递给它
});

// 当我们使用.catch()方法时，我们可以省略第一个函数并直接传递失败情况的回调函数
promise.then(function(result) {
    // 如果 promise 被解析了，我们就运行这个回调函数，并将结果传递给它
}).catch(function(err) {
    // 如果 promise 被拒绝了，我们就运行这个回调函数，并将错误传递给它
});
// promise A+ 规范推荐这个
// 上述两种写法并不完全等价，在.then()中的失败回调函数无
// 法捕捉之前的异常，而.catch()方法则可以  8.js

// 对于捕获 Promise 中的错误信息，如果需要同时处理多个
// 错误信息，则可以使用多个 .catch()方法进行链式调用；
// 如果需要在失败时特别处理错误信息，则既可以用 .then() 
// 的第二参数形式，也可以使用 .catch()方法。
