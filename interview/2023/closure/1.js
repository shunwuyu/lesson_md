// 为什么会产生闭包， 闭包到底在哪？
// 当一个函数能够记住并访问到其所在的词法作用域及作用域链，
// 特别强调是在其定义的作用域外进行的访问，此时该函数和其上层执行上下文共同构成闭包
// 1. 闭包一定是函数对象
// 2. 闭包和词法作用域，作用域链，垃圾回收机制息息相关
// 3. 当函数一定是在其定义的作用域外进行的访问时，才产生闭包
// 4. 闭包是由该函数和其上层执行上下文共同构成
// - 如何产生？
//     JS引擎执行到这行代码
//     let baz = foo();
function foo() {
    let a = 2;

    function bar() {
        console.log( a );
    }

    return bar;
}

let baz = foo();

baz();