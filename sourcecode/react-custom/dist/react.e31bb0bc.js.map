{"version":3,"sources":["index.js"],"names":["h","tag","attrs","children","React","element","render","vnode","container","textNode","document","createTextNode","appendChild","dom","createElement","Object","keys","forEach","key","value","setAttribute","child","name","test","toLowerCase","style","cssText","console","log","removeAttribute","ReactDOM","innerHTML","tick","color","Date","toLocaleTimeString","getElementById"],"mappings":"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","file":"react.e31bb0bc.js","sourceRoot":"..","sourcesContent":["function h(tag, attrs, ...children) {\n  return {\n    tag,\n    attrs,\n    children\n  }\n}\n// 将上文定义的 h 方法放到对象React中\nconst React = {\n  h\n}\n\nconst element = (\n  <div>\n    hello<span>world!</span>\n  </div>\n);\n/**\n * \n * @param {*} vnode \n * @param {*} container \n * 递归插入节点\n */\nfunction render(vnode, container) {\n  // 当vnode为字符串时，渲染结果是一段文本\n  if (typeof vnode === 'string') {\n    const textNode = document.createTextNode(vnode);\n    return container.appendChild(textNode);\n  }\n  const dom = document.createElement(vnode.tag);\n  if (vnode.attrs) {\n    Object.keys(vnode.attrs).forEach(key => {\n      const value = vnode.attrs[key];\n      setAttribute(dom, key, value);    // 设置属性\n    });\n  }\n  vnode.children.forEach(child => render(child, dom));    // 递归渲染子节点\n  return container.appendChild(dom);    // 将渲染结果挂载到真正的DOM上\n}\nfunction setAttribute( dom, name, value ) {\n  // 如果属性名是className，则改回class\n  if ( name === 'className' ) name = 'class';\n\n  // 如果属性名是onXXX，则是一个事件监听方法\n  if ( /on\\w+/.test( name ) ) {\n      name = name.toLowerCase();\n      dom[ name ] = value || '';\n  // 如果属性名是style，则更新style对象\n  } else if ( name === 'style' ) {\n      if ( !value || typeof value === 'string' ) {\n          dom.style.cssText = value || '';\n      } else if ( value && typeof value === 'object' ) {\n          for ( let name in value ) {\n              // 可以通过style={ width: 20 }这种形式来设置样式，可以省略掉单位px\n              dom.style[ name ] = typeof value[ name ] === 'number' ? value[ name ] + 'px' : value[ name ];\n          }\n      }\n  // 普通属性则直接更新属性\n  } else {\n    console.log(dom, name, value)\n      // if ( name in dom ) {\n      //     dom[ name ] = value || '';\n      // }\n      if ( value ) {\n          dom.setAttribute( name, value );\n      } else {\n          dom.removeAttribute( name );\n      }\n  }\n}\nconst ReactDOM = {\n  render: ( vnode, container ) => {\n      container.innerHTML = '';\n      return render( vnode, container );\n  }\n}\nfunction tick() {\n  const element = (\n      <div>\n          <h1 style={{color: 'red'}} a=\"3\" data-index=\"1\">Hello, world!</h1>\n          <h2>It is {new Date().toLocaleTimeString()}.</h2>\n      </div>\n    );\n  ReactDOM.render(\n      element,\n      document.getElementById( 'root' )\n  );\n}\n\n// setInterval( tick, 1000 );\ntick()"]}